package swag.events {
	
	import swag.events.SwagEvent;
	import swag.interfaces.events.ISwagErrorEvent;
	/**
	 * Extends the <code>SwagEvent</code> class for broadcasting error messages generated by the <em>SwAG Toolkit</em>. This
	 * class is used to broadcast any errors that are not thrown (i.e. non-fatal code errors). 
	 * 
	* The MIT License (MIT)
	 * 
	 * Copyright (c) 2014 Patrick Bay
	 * 
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 * 
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 * 
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE. 	 
	 */	
	public class SwagErrorEvent extends SwagEvent implements ISwagErrorEvent {
		
		/**
		 * A default (generic) error.
		 * <p>This type of event is dispatched when the cause of an error can't be established
		 * or doesn't fit into any of the other error event types of this object.</p> 
		 */
		public static const ERROR:String="SwagEvent.SwagErrorEvent.SWAGERROREVENT";
		/**
		 * This type of event is dispatched when data verification fails.
		 * <p>Typically this type of event signifies that the data being analyzed does not match the required 
		 * format (either it's of the wrong type or the contents are not as expected). This differs from the 
		 * DATAEMPTYERROR type in that data is present (not null, not undefined).</p> 
		 */
		public static const DATAFORMATERROR:String="SwagEvent.SwagErrorEvent.DATAFORMATERROR";
		/**
		 * This type of event is dispatched when the expected data is missing (either null or undefined).
		 * <p>This differs from the DATAVERIFYERROR in that the data expected doesn't exist as opposed to
		 * simply being of the wrong type or otherwise not matching the expected format.</p> 
		 */
		public static const DATAEMPTYERROR:String="SwagEvent.SwagErrorEvent.DATAEMPTYERROR";
		/**
		 * This type of event is dispatched when the specified operation can't be performed because
		 * it isn't supported.
		 * <p>This type of error means that the operation being attempted, while valid and
		 * properly formatted, can't be performed (is not supported). If possible, this operation
		 * <em>may</em> be supported in future versions.</p> 
		 */
		public static const UNSUPPORTEDOPERATIONERROR:String="SwagEvent.SwagErrorEvent.UNSUPPORTEDOPERATIONERROR";
		/**
		 * Dispatched when the asosciated operation has failed. This occurs only when the operation is supported
		 * but couldn't be completed for some reason (for example, a network failure).
		 * <p>This means that any associated data couldn't be parsed which would otherwise result in <code>DATAFORMATERROR</code>
		 * or <code>DATAEMPTYERROR</code> events.</p> 
		 * <p>
		 */
		public static const FAILEDOPERATIONERROR:String="SwagEvent.SwagErrorEvent.FAILEDOPERATIONERROR";
		
		/**
		 * @private 
		 */
		private var _description:String=new String("");
		/**
		 * @private
		 */
		private var _remedy:String=new String("");
		/**
		 * @private
		 */
		private var _code:int=new int(0);
		
		/**
		 * Creates a new <code>SwagErrorEvent</code> instance which can subsequently be broadcast using the standard
		 * Flash event system.
		 *  
		 * @param type The type of event to broadcast. If this parameter is omitted, or is null, or a blank string, a generic
		 * <code>SwagErrorEvent.ERROR</code>-type event will be created. Use the included static properties for other error codes.
		 * @param bubbles Passed as is to the standard Flash Event constructor.
		 * @param cancelable Passed as is to the standard Flash Event constructor.
		 * 
		 * @see flash.events.Event 
		 */		
		public function SwagErrorEvent(type:String=null) {
			if ((type==null) || (type=="")) {
				type=SwagErrorEvent.ERROR;
			}//if
			super(type);
		}//constructor
		
		/**
		 * The plain text description for the error instance.
		 * <p>This is a description of where the error occured and how it happened. This text should be 
		 * descriptive in order to allow the developer to remedy the issue. For example, avoid vague descriptions 
		 * like "The parameter was incorrect" and instead include specific details like "The firstParam parameter 
		 * was not a String type as expected".</p>
		 * <p>When deciding what to enter as a description, a good question to ask is: will this information
		 * help other developers pinpoint and fix the error?</p> 
		 */
		public function set description(descriptionSet:String):void {
			this._description=descriptionSet;
		}//set description
		
		public function get description():String {
			return (this._description);
		}//get description
		
		/**
		 * The suggested remedy for the associated error. 
		 * <p>This plain text describes the suggested remedy that the developer can take in order
		 * to fix the error.</p>
		 * <p>This string shouldn't include information on what caused the error but should instead
		 * include useful suggestions on some of the possible steps that the developer can take
		 * to prevent the error in the future. For example, "Ensure that the firstParam parameter
		 * is a String type and is not null".</p>
		 */
		public function set remedy(remedySet:String):void {
			this._remedy=remedySet;
		}//set remedy
		
		public function get remedy():String {
			return (this._remedy);
		}//get remedy
		
		/**
		 * An optional property supplied with most <code>FAILEDOPERATIONERROR</code> events where
		 * the source of the failure needs to be differentiated.
		 * <p>This allows the developer to create automated fallback mechanisms when certain operations
		 * fail. For any non-<code>FAILEDOPERATIONERROR</code> events, this value will always be 0.</p>
		 */
		public function set code(codeSet:int):void {
			this._code=codeSet;
		}//set code
		
		public function get code():int {
			return (this._code);
		}//get code
		
	}//SwagErrorEvent class
	
}//package